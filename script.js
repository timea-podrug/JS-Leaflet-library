'use strict';

// prettier-ignore
const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputStars = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');
let map, mapEvent;

class Place {
  date = new Date();
  //I want every place to have a unique id and for that I will use the date make it a string and store the last ten digits
  id = (Date.now() + '').slice(-10);
  constructor(coords, stars, name) {
    this.coords = coords;
    this.stars = stars;
    this.name = name;
  }
}
class Cafe extends Place {
  constructor(coords, stars, name, quality) {
    super(coords, stars, name);
    this.quality = quality;
  }
}
class Restourant extends Place {
  constructor(coords, stars, name, cuisine) {
    super(coords, stars, name);
    this.cuisine = cuisine;
  }
}

class App {
  #map;
  #mapEvent;
  constructor() {
    this._getPosition();
    //without binding this would be set to form element, we need it to point to the object itself (app object)
    form.addEventListener('submit', this._newPlace.bind(this));
  }
  _getPosition() {
    //if geolocation is allowed
    if (navigator.geolocation) {
      //we need to bind the this keyword because otherwise in the _loadMap function it will be set to undefined
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert('Could not get position.');
        }
      );
    }
  }
  _loadMap(position) {
    //get the latitude and the longitude
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    //set the map to the users location
    const coords = [latitude, longitude];
    //map is an object generated by leaflet
    this.#map = L.map('map').setView(coords, 13);
    //load the map via leaflet library that uses openstreet map
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    L.marker(coords)
      .addTo(map)
      .bindPopup('A pretty CSS popup.<br> Easily customizable.')
      .openPopup();
    //we don't use eventListener because leafled has its own build in function on
    this.#map.on('click', this._showForm.bind(this));
  }
  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove('hidden');
    inputStars.focus();
  }
  _newPlace(e) {
    //preventing form from refreshing
    e.preventDefault();
    //clearing the input fields
    inputDuration.value =
      InputEvent.value =
      inputElevation.value =
      inputStars.value =
        '';
    //we want to get the new latitude and longitude of the clicked position, they are stored in the latlng object
    const { lat, lng } = this.#mapEvent.latlng;
    L.marker([lat, lng])
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 200,
          className: 'running-popup',
        })
      )
      .setPopupContent('Cafe/Restourant')
      .openPopup();
  }
}

const app = new App();
