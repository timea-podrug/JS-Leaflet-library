"use strict";

// prettier-ignore
const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

const form = document.querySelector(".form");
const containerPlaces = document.querySelector(".places");
const inputType = document.querySelector(".form__input--type");
const inputStars = document.querySelector(".form__input--stars");
const inputCuisine = document.querySelector(".form__input--cuisine");
const inputAmbiance = document.querySelector(".form__input--ambiance");
const inputName = document.querySelector(".form__input--name");
let map, mapEvent;

class Place {
  date = new Date();
  //I want every place to have a unique id and for that I will use the date make it a string and store the last ten digits
  id = (Date.now() + "").slice(-10);
  constructor(coords, stars, name) {
    this.coords = coords;
    this.stars = stars;
    this.name = name;
  }
  _setDescription() {
    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} - ${
      this.name
    }`;
  }
}
class Cafe extends Place {
  type = "cafe";
  constructor(coords, stars, name, ambiance) {
    super(coords, stars, name);
    this.ambiance = ambiance;
    this._setDescription();
  }
}
class Restaurant extends Place {
  type = "restaurant";
  constructor(coords, stars, name, cuisine) {
    super(coords, stars, name);
    this.cuisine = cuisine;
    this._setDescription();
  }
}

class App {
  #map;
  #mapEvent;
  #places = [];

  constructor() {
    this._getPosition();
    //without binding this would be set to form element, we need it to point to the object itself (app object)
    form.addEventListener("submit", this._newPlace.bind(this));
    inputType.addEventListener("change", this._toggleAmbianceField);
  }

  _getPosition() {
    //if geolocation is allowed
    if (navigator.geolocation) {
      //we need to bind the this keyword because otherwise in the _loadMap function it will be set to undefined
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert("Could not get position.");
        }
      );
    }
  }

  _loadMap(position) {
    //get the latitude and the longitude
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    //set the map to the users location
    const coords = [latitude, longitude];
    //map is an object generated by leaflet
    this.#map = L.map("map").setView(coords, 13);
    //load the map via leaflet library that uses openstreet map
    L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    //we don't use eventListener because leafled has its own build in function on
    this.#map.on("click", this._showForm.bind(this));
  }

  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove("hidden");
    inputStars.focus();
  }

  _hideForm() {
    //Emptying the inputs
    inputStars.value =
      inputName.value =
      inputCuisine.value =
      inputAmbiance.value =
        "";
    form.style.display = "none";
    form.classList.add("hidden");
    setTimeout(() => (form.style.display = "grid"), 1000);
  }

  _toggleAmbianceField() {
    inputAmbiance.closest(".form__row").classList.toggle("form__row--hidden");
    inputCuisine.closest(".form__row").classList.toggle("form__row--hidden");
  }

  _newPlace(e) {
    //preventing form from refreshing
    e.preventDefault();

    //Geting the data from the form
    const type = inputType.value;
    const stars = inputStars.value;
    const name = inputName.value;
    const { lat, lng } = this.#mapEvent.latlng;
    let place;

    //If the place is a coffe shop, create cafe object
    if (type === "cafe") {
      const ambiance = inputAmbiance.value;
      //Checking if data is correct
      // if (!String(name) || !Number.isFinite(stars) || !String(ambiance)) {
      //   return alert("Invalid inputs");
      // }

      place = new Cafe([lat, lng], stars, name, ambiance);
    }

    //If the place is a restaurant, create restaurant object
    if (type === "restaurant") {
      const cuisine = inputCuisine.value;

      //Checking if data is correct
      // if (!String(name) || !Number.isFinite(stars) || !String(cuisine)) {
      //   return alert("Invalid inputs");
      // }
      place = new Restaurant([lat, lng], stars, name, cuisine);
    }

    //Add the new object to the the places array
    this.#places.push(place);

    //Render the place on map as marker
    //we want to get the new latitude and longitude of the clicked position, they are stored in the latlng object
    this._renderPlaceMarker(place);
    //Render the place on the list
    this._renderPlace(place);
    //Hide the form and clear the input fields
    this._hideForm();
  }
  _renderPlaceMarker(place) {
    L.marker(place.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 200,
          className: `${place.type}-popup`,
        })
      )
      .setPopupContent(`üèôÔ∏è ${place.description}`)
      .openPopup();
    console.log(place);
  }

  _renderPlace(place) {
    let html = `
    <li class="place place--${place.type}" data-id="${place.id}">
    <h2 class="place__title">${place.description}</h2>
    
    <div class="place__details">
      <span class="place__icon">üî†</span>
      <span class="place__value">${place.name}</span>
      
    </div>`;
    if (place.type === "restaurant") {
      html += `
      </div>
      <div class="place__details">
        <span class="place__icon">‚≠ê</span>
        <span class="place__value">${place.stars}</span>
        
      </div>
      <div class="place__details">
        <span class="place__icon">üó∫Ô∏è</span>
        <span class="place__value">${place.cuisine}</span>
        
      </div>
    </li>`;
      form.insertAdjacentHTML("afterend", html);
    }
    if (place.type === "cafe") {
      html += `
      <div class="place__details">
        <span class="place__icon">‚≠ê</span>
        <span class="place__value">${place.stars}</span>
        
      </div>
      <div class="place__details">
        <span class="place__icon">üî•</span>
        <span class="place__value">${place.ambiance}</span>
        
      </div>
    </li>`;
      form.insertAdjacentHTML("afterend", html);
    }
  }
}

const app = new App();
